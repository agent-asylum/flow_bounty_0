# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from enum import Enum
from typing import Any

from aea.skills.behaviours import State, FSMBehaviour


class Flow0abciappEvents(Enum):
    """Events for the fsm."""

    DONE = "DONE"
    RETRY = "RETRY"
    MAX_RETRIES = "MAX_RETRIES"


class Flow0abciappStates(Enum):
    """States for the fsm."""

    VERIFYDEPLOYMENTROUND = "verifydeploymentround"
    ERRORROUND = "errorround"
    DEPLOYAGENTROUND = "deployagentround"
    INITIALIZATIONROUND = "initializationround"
    SETUPENVIRONMENTROUND = "setupenvironmentround"
    INSTALLDEPENDENCIESROUND = "installdependenciesround"
    VERIFICATIONFAILEDROUND = "verificationfailedround"
    CONFIGUREAGENTROUND = "configureagentround"
    FINISHEDROUND = "finishedround"


class BaseState(State, ABC):
    """Base class for states."""

    _state: Flow0abciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = Flow0abciappEvents.DONE

    def is_done(self) -> bool:
        """Is done."""
        return self._is_done

    @property
    def event(self) -> str | None:
        """Current event."""
        return self._event


# Define states


class VerifyDeploymentRound(BaseState):
    """This class implements the behaviour of the state VerifyDeploymentRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.VERIFYDEPLOYMENTROUND


class ErrorRound(BaseState):
    """This class implements the behaviour of the state ErrorRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.ERRORROUND


class DeployAgentRound(BaseState):
    """This class implements the behaviour of the state DeployAgentRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.DEPLOYAGENTROUND


class InitializationRound(BaseState):
    """This class implements the behaviour of the state InitializationRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.INITIALIZATIONROUND


class SetupEnvironmentRound(BaseState):
    """This class implements the behaviour of the state SetupEnvironmentRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.SETUPENVIRONMENTROUND


class InstallDependenciesRound(BaseState):
    """This class implements the behaviour of the state InstallDependenciesRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.INSTALLDEPENDENCIESROUND


class VerificationFailedRound(BaseState):
    """This class implements the behaviour of the state VerificationFailedRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.VERIFICATIONFAILEDROUND


class ConfigureAgentRound(BaseState):
    """This class implements the behaviour of the state ConfigureAgentRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.CONFIGUREAGENTROUND


class FinishedRound(BaseState):
    """This class implements the behaviour of the state FinishedRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Flow0abciappStates.FINISHEDROUND


class Flow0abciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(Flow0abciappStates.VERIFICATIONFAILEDROUND.value, VerificationFailedRound(**kwargs), True)

        self.register_state(Flow0abciappStates.FINISHEDROUND.value, FinishedRound(**kwargs))

        self.register_state(Flow0abciappStates.VERIFYDEPLOYMENTROUND.value, VerifyDeploymentRound(**kwargs))
        self.register_state(Flow0abciappStates.ERRORROUND.value, ErrorRound(**kwargs))
        self.register_state(Flow0abciappStates.DEPLOYAGENTROUND.value, DeployAgentRound(**kwargs))
        self.register_state(Flow0abciappStates.INITIALIZATIONROUND.value, InitializationRound(**kwargs))
        self.register_state(Flow0abciappStates.SETUPENVIRONMENTROUND.value, SetupEnvironmentRound(**kwargs))
        self.register_state(Flow0abciappStates.INSTALLDEPENDENCIESROUND.value, InstallDependenciesRound(**kwargs))
        self.register_state(Flow0abciappStates.CONFIGUREAGENTROUND.value, ConfigureAgentRound(**kwargs))

        self.register_transition(
            source=Flow0abciappStates.CONFIGUREAGENTROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.DEPLOYAGENTROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.DEPLOYAGENTROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.VERIFYDEPLOYMENTROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.ERRORROUND.value,
            event=Flow0abciappEvents.RETRY,
            destination=Flow0abciappStates.INITIALIZATIONROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.INITIALIZATIONROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.SETUPENVIRONMENTROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.INSTALLDEPENDENCIESROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.CONFIGUREAGENTROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.SETUPENVIRONMENTROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.INSTALLDEPENDENCIESROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.VERIFICATIONFAILEDROUND.value,
            event=Flow0abciappEvents.MAX_RETRIES,
            destination=Flow0abciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.VERIFICATIONFAILEDROUND.value,
            event=Flow0abciappEvents.RETRY,
            destination=Flow0abciappStates.DEPLOYAGENTROUND.value,
        )
        self.register_transition(
            source=Flow0abciappStates.VERIFYDEPLOYMENTROUND.value,
            event=Flow0abciappEvents.DONE,
            destination=Flow0abciappStates.FINISHEDROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Flow0abciapp FSM behaviour.")

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Flow0abciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        os._exit(0)
